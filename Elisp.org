* Generic functions
#+begin_src emacs-lisp
  (defun launch-term-for-current-buffer ()
       (interactive)
       (save-buffer)
       (ns-do-applescript
        (concat
         "tell application \"iTerm\" \n\
            activate \n\
            tell the first terminal \n\
              launch session \"Default Session\" \n\
              tell the last session \n\
                write text \"cd " (file-name-directory (buffer-file-name)) "\" \n\
              end tell \n\
            end tell \n\
          end tell")))
  (global-set-key (kbd "<f6>") 'launch-term-for-current-buffer)    
  
  (defmacro comment (&optional sym &rest body)
    (let ((arg (if (not (null *comment*)) *comment* sym)))
      (cond ((and (symbolp arg)
                  (eq :run arg)) `(progn ,@body))
            ((integerp arg)
             (nth arg `(,@body))))))
  
  (defun rlb3/join (collection separator)
    (mapconcat 'identity collection separator))
  
  (defmacro* rlb3/with-gensyms (syms &body body)
    `(let ,(mapcar #'(lambda (s)
                       `(,s (gensym)))
                   syms)
       ,@body))
  
  (defmacro* rlb3/save-windows (&body body)
    (rlb3/with-gensyms (letter reg-value)
                       `(let* ((,letter ?s)
                               (,reg-value (get-register ,letter)))
                          (window-configuration-to-register ,letter)
                          (unwind-protect
                              ,@body
                            (jump-to-register ,letter)
                            (set-register ,letter ,reg-value)))))
#+end_src
* [[http://www.reddit.com/r/emacs/comments/jh1me/keeping_large_dired_buffers_tidy/][Keeping large dired buffers tidy]] 
My philosophy of use for dired is to keep open 1 or 2 dired buffers and use lots of subdirs. LOTS. For a while there I was frustrated with how unmanageable a dired buffer can become with dozens of open subdirs, which involve many branches in the directory structure.
I set the 'k' key to the following simple little function. Kill the current subdir, and jump back to that subdir's entry in the parent directory. I find navigation to be pretty quick, and it keeps the dired buffer tidy. Here it is. Tips or suggestions welcome. Works best with '-al' dired-listing-switches.
#+begin_src emacs-lisp
(defun dired-kill-and-next-subdir ()
  (interactive)
  (let* ((subdir-name (dired-current-directory))
           (parent-dir  (file-name-directory (directory-file-name subdir-name)))
           (search-term (concat " " (file-basename subdir-name))))
    (dired-kill-subdir)
    (dired-goto-subdir parent-dir)
    (search-forward search-term)))
#+end_src
* A org-mode kata
#+begin_src emacs-lisp
(defun toggle-checkbox-with-timestamp ()
  "Toggle checkbox and insert a timestamp in the next line. "
  (interactive) 
  (save-excursion
    (move-end-of-line nil)    
    (org-toggle-checkbox)
    (org-update-checkbox-count)
    (insert (concat "\nFINISHED: <" (format-time-string "%Y-%m-%d %a" (current-time)) ">"))    
    (indent-according-to-mode)))
#+end_src
* emacs-jabber config
#+begin_src emacs-lisp
(require 'jabber-autoloads)
(setq jabber-account-list
      '(("robo4288@gmail.com" 
         (:network-server . "talk.google.com")
         (:connection-type . ssl))
        ("robert@jabber.cpanel.net/emacs2"
         (:network-server . "jabber.cpanel.net")
         (:connection-type . ssl))))
#+end_src
* eshell config
#+begin_src emacs-lisp
(setq eshell-prompt-function
      (lambda ()
        (concat
         (eshell/pwd)
         " $ ")))

(defun eshell/clear ()
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)))

(defun eshell/ec (file)
  (find-file file))

(defalias 'eshell/vim 'eshell/ec)
(defalias 'eshell/vi  'eshell/ec)

(setq eshell-prompt-function
      (lambda ()
        (concat
         (eshell/pwd)
         (if (eshell/git-branch-name)
             (concat " (" (eshell/git-branch-name) ")"))
         " $ ")))

;; git symbolic-ref HEAD 2> /dev/null | cut -b 12-
(defun eshell/git-branch-name ()
  (interactive)
  (let* ((branch-ref (when (shell-command-to-string "git rev-parse --git-dir 2>/dev/null")
                       (shell-command-to-string "git symbolic-ref HEAD 2>/dev/null")))
         (branch (nth 0 (reverse (split-string branch-ref "/")))))
    (when (not (string= branch ""))
      (substring branch 0 -1))))
#+end_src
* Perl functions
#+begin_src emacs-lisp 
(defun rlb3/decompile-perl (start end)
  (interactive "r")
  (shell-command-on-region start end "perl -MO=Concise,-exec"))

(defun rlb3/deparse-perl (start end)
  (interactive "r")
  (shell-command-on-region start end "perl -MO=Deparse,-P"))

(defun rlb3/perl-what-sub ()
  (interactive)
  (save-excursion
    (re-search-backward "^sub" nil t 1)
    (when (looking-at "sub")
      (forward-char 4)
      (let ((beg (point)))
        (search-forward " ")
        (message "SUBROUTINE: %s" (buffer-substring beg (1- (point))))))))
#+end_src
* Indent Whole Buffer
#+begin_src emacs-lisp 
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
#+end_src
* .emacs.d
** init.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'cl)
  
  (push "/usr/local/bin" exec-path)
  
  (global-font-lock-mode 1)
  
  (ido-mode t)
  
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq inhibit-startup-message t)
  
  (fset 'yes-or-no-p 'y-or-n-p)
  
  (delete-selection-mode t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode t)
  (show-paren-mode t)
  (column-number-mode t)
  (set-fringe-style -1)
  (tooltip-mode -1)
  
  (global-set-key "\C-x\C-b" 'ibuffer)
  
  (setq rlb3-user-config (concat user-emacs-directory user-login-name ".el")
        rlb3-user-dir (concat user-emacs-directory user-login-name)
        rlb3-system-config (concat user-emacs-directory (car (split-string system-name "\\.")) ".el"))
  
  (add-to-list 'load-path rlb3-user-dir)
  
  (dolist (l (directory-files rlb3-user-dir nil "^[^#].*el$"))
    (load l))
  
  (when (file-exists-p rlb3-user-config)
    (load rlb3-user-config))
  
  (when (file-exists-p rlb3-system-config)
    (load rlb3-system-config))
  
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  
#+end_src
** robert.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/robert.el
  (set-register ?w '(file . "~/Dropbox/WIKI/Home.org"))
  (set-register ?i '(file . "~/.emacs.d/init.el"))
  (set-register ?r '(file . "~/.emacs.d/robert.el"))
  
  (global-set-key (kbd "C-c g") 'magit-status)
  
  (setq ispell-program-name "/usr/local/bin/aspell")
  (setq ispell-extra-args '("--sug-mode=ultra"))
  
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d!/!)")
                (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "|" "CANCELLED(c@/!)" "PHONE")
                (sequence "OPEN(O!)" "|" "CLOSED(C!)"))))
  
  (setq org-todo-keyword-faces 
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("STARTED" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("SOMEDAY" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("OPEN" :foreground "blue" :weight bold)
                ("CLOSED" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
  
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
  (setq org-directory "~/Dropbox/org-files")
  (setq org-agenda-files (quote ("~/Dropbox/org-files/omnifocus.org")))
  
  (setq org-mobile-inbox-for-pull "~/Dropbox/org-files/inbox.org")
  
  (setq org-refile-targets
        (quote (("omnifocus.org" :maxlevel . 1)
                ("articles.org" :maxlevel . 1))))
  
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-clock-in-resume t)
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  (setq org-clock-into-drawer t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)
  (setq org-clock-persist (quote history))
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  (setq org-clock-report-include-clocking-task t)
  
  (when (file-exists-p "~/.emacs.d/vender/yasnippet")
    (add-to-list 'load-path "~/.emacs.d/vender/yasnippet")
    (require 'yasnippet)
    (yas/initialize)
    (yas/load-directory "~/.emacs.d/snippets")
    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
  
    (add-hook 'org-mode-hook
              (lambda ()
                ;; yasnippet (using the new org-cycle hooks)
                (make-variable-buffer-local 'yas/trigger-key)
                (setq yas/trigger-key [tab])
                (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                (define-key yas/keymap [tab] 'yas/next-field))))
  
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (perl . t)
     (sh . t)
     (ruby . t)
     (ledger . t)
     (sqlite . t)))
  
  (set-language-environment "utf-8")
  (setq slime-net-coding-system 'utf-8-unix)
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
    ;; Replace "sbcl" with the path to your implementation
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  
  (defun sm-try-smerge ()
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode 1))))
  (add-hook 'find-file-hook 'sm-try-smerge t)
  
  (when (file-exists-p "~/.emacs.d/vender/emacs-jabber")
    (add-to-list 'load-path "~/.emacs.d/vender/emacs-jabber")
    (require 'jabber-autoloads)
    (setq jabber-account-list
          '(("robo4288@gmail.com" 
             (:network-server . "talk.google.com")
             (:connection-type . ssl))
            ("robert@jabber.cpanel.net/emacs2"
             (:network-server . "jabber.cpanel.net")
             (:connection-type . ssl)))))
  
#+end_src
* yasnippets
  #+source: header
#+begin_src emacs-lisp 
# cpanel - ${1:`(let ((file-name (substring (buffer-file-name) 18)))
                  (concat file-name (dotimes (x (- 39 (length file-name)))
                                      (insert " "))))`}Copyright(c) 20${2:11} cPanel, Inc.
#                                                           All rights Reserved.
# copyright@cpanel.net                                         http://cpanel.net
# This code is subject to the cPanel license. Unauthorized copying is prohibited

$0
#+end_src

* cpanel.el
#+begin_src emacs-lisp 
(eval-when-compile (require 'cl))
(require 'json)
(require 'url)
(require 'url-http)

(defgroup cpanel nil
  "cPanel customization group"
  :group 'cpanel
  :prefix "cpanel-")

(defcustom cpanel-user "root"
  "cPanel API user"
  :type 'string
  :group 'cpanel)

(defcustom cpanel-host-and-port "localhost:2086"
  "cPanel host and port"
  :type 'string
  :group 'cpanel)

(defcustom cpanel-whm-host "http://localhost:2086/json-api/"
  "cPanel API Host"
  :type 'string
  :group 'cpanel)

(setq cpanel-passwd nil)

(defun cpanel-passwd ()
  (or cpanel-passwd (setf cpanel-passwd (read-passwd "WHM Password> "))))

(defun cpanel-clear-auth ()
  (interactive)
  (setq cpanel-passwd nil)
  (set url-basic-auth-storage nil))

;; Maybe a cpanel-with-auth macro
;;
;; (defmacro cpanel-with-auth (&rest body)
;;   `(let ((url-basic-auth-storage (,cpanel-host-and-port ("Web Host Manager" . ,(base64-encode-string (format "%s:%s" cpanel-user (cpanel-passwd)))))))
;;      ,@body)))

(defun cpanel-auth ()
  (set url-basic-auth-storage
       (cons (list cpanel-host-and-port
                   (cons "Web Host Manager"
                         (base64-encode-string (format "%s:%s" cpanel-user (cpanel-passwd)))))
             (symbol-value url-basic-auth-storage))))

(defun cpanel-listaccts ()
  (cpanel-auth)
  (with-temp-buffer
    (set-buffer
     (url-retrieve-synchronously
      (format "%s%s" cpanel-whm-host "listaccts?api.version=1")))
    (goto-char (point-min))
    (forward-line (1- 6))
    (let ((json-array-type 'list))
      (json-read-from-string (buffer-substring (point) (point-max))))))

(defun cpanel-usernames ()
  (loop for acct in (cdr (assoc 'acct (assoc 'data (cpanel-listaccts))))
        collect (cdr (assoc 'user acct))))

(defun cpanel-view-users ()
  (interactive)
  (save-excursion
    (let ((cpanel-buffer "*cpanel*"))
      (set-buffer (get-buffer-create cpanel-buffer))
      (erase-buffer)
      (insert "cPanel Users:\n")
      (dolist (user (cpanel-usernames))
        (insert (format "\t%s\n" user)))
      (switch-to-buffer (get-buffer-create cpanel-buffer)))))

(defun cpanel-terminate-user ()
  (interactive)
  (cpanel-auth)
  (let* ((json-array-type 'list)
         (user (ido-completing-read "Cpanel User> " (cpanel-usernames)))
         (node
          (with-temp-buffer
            (set-buffer
             (url-retrieve-synchronously
              (format "%s%s?user=%s&keepdns=0" cpanel-whm-host "removeacct" user)))
            (goto-char (point-min))
            (forward-line (1- 6))
            (json-read-from-string (buffer-substring (point) (point-max))))))
    (message (cdr (assoc 'statusmsg (car (cdr (assoc 'result node))))))))

(defun cpanel-create-user ()
  (interactive)
  (cpanel-auth)
  (let* ((json-array-type 'list)
         (domain (read-input "User's Domain> "))
         (user (read-input "Username> "))
         (pass (read-passwd "User's Password> "))
         (options `(("domain" . ,domain)   ; Domain name
                    ("username" . ,user)   ; Username for the account
                    ("password" . ,pass)   ; Password for accessing cPanel
                    ("plan" . "default")   ; Package to use for account creation
                    ("ip" . "n")           ; Whether or not the domain has a dedicated IP address
                    ("cpmod" . "x3")       ; cPanel theme name
                    ("useregns" . "0")     ; Use the registered nameservers for the domain instead of the ones configured on the server
                    ("reseller" . "0")     ; Give reseller privileges to  Give reseller privileges to
                    ("hasshell" . "1")     ; Whether or not the domain has shell/SSH access
                    ("forcedns" . "1")     ; Overwrite current DNS Zone if a DNS Zone already  exists
                    ("maxsql" . "100")     ; Maximum number of SQL databases the user can create
                    ("maxsub" . "100")     ; Maximum number of subdomains the user can create
                    ("maxpark" . "100")    ; Maximum number of parked domains the user can create
                    ("maxaddon" . "100"))) ; Maximum number of addon domains the user can create 
         (uri-string (rlb3/join (mapcar (lambda (pair) (format "%s=%s" (car pair) (cdr pair))) options) "&"))
         (node (with-temp-buffer
                 (set-buffer
                  (url-retrieve-synchronously
                   (format "%s%s?%s" cpanel-whm-host "createacct" uri-string)))
                 (goto-char (point-min))
                 (forward-line (1- 6))
                 (json-read-from-string (buffer-substring (point) (point-max))))))
    (message (cdr (assoc 'statusmsg (car (cdr (assoc 'result node))))))))

(provide 'cpanel)
#+end_src

* fbcli.el
#+begin_src emacs-lisp
(require 'cl)
(require 'thingatpt)
(require 'parse-time)

;; To configure
;; M-x customize-group RET cpanel

(defgroup cpanel nil
  "cPanel customization group")

(defcustom fbcli-binary "fbcli"
  "Location of the fbcli binary"
  :type 'file
  :group 'cpanel)

(defcustom fbcli-password-file nil
  "Location of the password file"
  :type 'file
  :group 'cpanel)

(defcustom fbcli-user nil
  "Fogbugz username"
  :type 'string
  :group 'cpanel)

(defcustom fbcli-url "fogbugz.cpanel.net"
  "Fogbugz server"
  :type 'string
  :group 'cpanel)

(defun fbcli-get-case-number ()
  (let ((fbcase (or (thing-at-point 'word)
                    (read-string "Case Number> "))))
    (when (eql (string-match "^[[:digit:]]+$" fbcase) 0)
      (parse-integer fbcase))))

(defun fbcli-view-case ()
  (interactive)
  (let ((fbcli-buffer "*fbcli*")
        (fbcase (fbcli-get-case-number)))
    (if (integerp fbcase)
        (progn
          (set-buffer (get-buffer-create fbcli-buffer))
          (erase-buffer)
          (shell-command
           (format "%s --password-file %s --url %s --user %s --extended view %s" fbcli-binary fbcli-password-file fbcli-url fbcli-user fbcase)
           (current-buffer) nil)
          (let ((url (format "http://%s/default.asp?%s" fbcli-url fbcase)))
            (message "%s" url)
            (kill-new (format "%s" url))))
      (message "Case number not given"))))

(global-set-key (kbd "C-c f") 'fbcli-view-case)

(provide 'fbcli)
#+end_src

 #+begin_src sh :var filename=(buffer-file-name) :exports both
   wc -w $filename
 #+end_src

 #+results:
 : 1479 /Users/robert/Dropbox/WIKI/Elisp.org

* Gnus Config
  #+begin_src emacs-lisp :tangle ~/.gnus.el
          (load "starttls")
          (load-library "smtpmail")
              
          (setq user-mail-address "robo4288@gmail.com")
          (setq user-full-name "Robert Boone")
              
          ;; Configure incoming mail (IMAP)
          (setq gnus-select-method '(nnimap "gmail"
                                            (nnimap-address "imap.gmail.com")
                                            (nnimap-server-port 993)
                                            (nnimap-authinfo-file "~/.authinfo")
                                            (nnimap-stream ssl)))
              
          ;; Configure outbound mail (SMTP)
          (setq smtpmail-auth-credentials "~/.authinfo"
                smtpmail-smtp-server "smtp.gmail.com"
                smtpmail-default-smtp-server "smtp.gmail.com"
                send-mail-function 'smtpmail-send-it
                message-send-mail-function 'smtpmail-send-it
                smtpmail-smtp-service 587
                smtpmail-debug-info t
                smtpmail-debug-verb t)
          (setq smtpmail-local-domain nil)
          (setq gnus-permanently-visible-groups "gmail")
          (executable-find starttls-program)
              
           #+end_src
  #+begin_src sh :tangle ~/.authinfo
    machine imap.gmail.com login robo4288@gmail.com password xXxXxXxXxXx port 993
    machine smtp.gmail.com login robo4288@gmail.com password xXxXxXxXxXx port 587
  #+end_src
